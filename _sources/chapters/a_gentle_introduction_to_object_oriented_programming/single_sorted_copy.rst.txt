
Single Sorted Copy |2|
~~~~~~~~~~~~~~~~~~~~~~

Write a function named *single_sorted_copy* that takes a *list of
integers* as input. This function should return a new *list of integers*
where the duplicates are eliminated from the original list, and the
items of the new list are in the increasing order.

Note that you should create a copy of the original list first.
Otherwise, any changes on the given argument of your function will
reflect the changes on the original one.

*Hint:* There exists list member functions to return the number of
occurrences of an element, excluding an element from the list and
rearranging the items of a list in the increasing order.

.. container:: sampleio

   Sample I/O:

.. |2| image:: ../../figures/difficulty_five.png
   :class: difficulty

.. code:: default

   >>> single_sorted_copy([3, 3, 2, 2, 1, 1])
   [1, 2, 3]

   >>> single_sorted_copy([1, 3, 2, 2, 1, 1, 4])
   [1, 2, 3, 4]

.. raw:: html

   <button type="button" class="collapsible" onclick="toggle()">

Show the Answer

.. raw:: html

   </button>

.. raw:: html

   <div class="hiddenanswer">

.. code:: python

   def single_copy_sort(lst):
       copied_lst = lst[:]         # slicing returns a shallow copy of the list
       for x in copied_lst:
           for i in range(copied_lst.count(x)-1):
               copied_lst.remove(x)
       copied_lst.sort()
       return copied_lst

.. raw:: html

   </div>
